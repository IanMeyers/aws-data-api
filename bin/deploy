#!/usr/bin/env python3
import importlib
import sys
import json
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import chalicelib.utils as utils
import chalicelib.parameters as params

ERROR = -1
CHALICE_MISSING = 'AWS Chalice is not installed. Please install Chalice (https://chalice.readthedocs.io/en/latest) and try again'


def test_import(module, package=None, message=None):
    try:
        return importlib.import_module(module, package)
    except:
        if package is not None:
            name = "%s.%s" % (package, module)
        else:
            name = module
        print("Prerequisite Not Met - %s" % (name) if message is None else message)
        sys.exit(ERROR)


# test and import modules required for the creation of the configuration
pystache = test_import('pystache')
argparse = test_import('argparse')
subprocess = test_import('subprocess')

# test and import modules required to deploy
test_import('chalice', 'Chalice', CHALICE_MISSING)

parser = argparse.ArgumentParser(description='AWS Data API Setup')
parser.add_argument('-subnets', required=True, help='Subnet ID\'s where your API will run (comma separated list)')
parser.add_argument('-sgs', '-security-groups', required=True, dest="sgs",
                    help='Security Group ID\'s that grant network access to your API (comma separated list )')
parser.add_argument('-stage', required=True, dest='stage_name', help='Stage Name for Data API')
parser.add_argument('-log-level', default="INFO", required=False, choices=['INFO', 'ERROR', 'WARN', 'DEBUG'],
                    dest='log_level', help='Log Level (INFO)')
parser.add_argument('-schema-refresh-default', default="100", required=False,
                    dest='refresh_schema_hits', help='Schema Refresh Hitcount Default (100)')
parser.add_argument('-enable-xray', action='store_true',
                    dest='enable_xray', help='Should AWS XRay always be enabled? Turned off for Prod Stages (False)')
parser.add_argument('-authorization', required=False, dest='auth', choices=['IAM', 'Cognito', 'Custom'])
parser.add_argument('-cognito-details', required=False, dest='cognito_info',
                    help="If Cognito Authorization is to be used, a CSV list of User Pool Name followed by one or more provider ARNs")
parser.add_argument('-cors-domain', required=False, dest='cors_domain',
                    help="Domain name to allow requests from")
parser.add_argument('-allow-all-cors', action='store_true', dest='allow_all_cors',
                    help="Allow requests from all Domains")
parser.add_argument('-deploy-custom-domain', required=False, dest='custom_domain_info',
                    help="Information for deploying to custom domains. CSV list of Domain Name, ACM Certificate ARN, URL Prefix (optional)")
parser.add_argument('-action', default="deploy", required=False, choices=['prepare', 'deploy'], dest='action',
                    help='Deploy Action (prepare | deploy)')
parser.add_argument('-verbose', action='store_true', dest='verbose',
                    help='Verbose Output (False)')

# parse and convert args to dict
args = parser.parse_args()
config_doc = vars(args)

# parse and pivot subnets and security groups
config_doc["subnets"] = json.dumps(args.subnets.split(","))
config_doc["sgs"] = json.dumps(args.sgs.split(","))

# load cognito detail into config
if args.auth == params.AUTHORIZER_COGNITO:
    cognito_detail = args.cognito_info.split(',')

    if len(cognito_detail) < 2:
        raise Exception("Cognito Details must include User Pool Name and on or more Provider ARNS")
    else:
        config_doc["cog_pool_name"] = cognito_detail[0]
        config_doc["cog_provider_arns"] = ",".join(cognito_detail[1:])

# load custom domain information into the config
if args.custom_domain_info is not None:
    domain_info = args.custom_domain_info.split(',')

    if len(domain_info) < 2:
        raise Exception(
            "Invalid Custom Domain Information. Format is Domain Name, ACM Certificate ARN, URL Prefix (optional)")
    else:
        config_doc["custom_domain_name"] = domain_info[0]
        config_doc["acm_cert_arn"] = domain_info[1]
        if len(domain_info) == 3:
            config_doc["custom_url_prefix"] = domain_info[2]

utils.generate_configuration_files(config_doc, args.verbose)

if args.action == "deploy":
    print("Deploying Data API...")
    deploy_args = ['chalice', 'deploy']

    # don't add a --stage for production
    if args.stage_name is not None and args.stage_name in ['dev', 'test']:
        deploy_args = deploy_args + ['--stage', args.stage_name]

    subprocess.call(deploy_args)
