#!/usr/bin/env python3

ERROR = -1
CHALICE_MISSING = 'AWS Chalice is not installed. Please install Chalice (https://chalice.readthedocs.io/en/latest) and try again'

import importlib
import sys
import json

sys.path.append(".chalice")
sys.path.append("chalicelib")


def test_import(module, package=None, message=None):
    try:
        return importlib.import_module(module, package)
    except:
        if package is not None:
            name = "%s.%s" % (package, module)
        else:
            name = module
        print("Prerequisite Not Met - %s" % (name) if message is None else message)
        sys.exit(ERROR)


# test and import modules required for the creation of the configuration
pystache = test_import('pystache')
argparse = test_import('argparse')
subprocess = test_import('subprocess')

# test and import modules required to deploy
test_import('chalice', 'Chalice', CHALICE_MISSING)

parser = argparse.ArgumentParser(description='AWS Data API Setup')
parser.add_argument('-subnets', required=True, help='Subnet ID\'s where your API will run (comma separated list)')
parser.add_argument('-sgs', required=True,
                    help='Security Group ID\'s that grant network access to your API (comma separated list )')
parser.add_argument('-delete-mode', default="label", choices=['label', 'tombstone'], required=False, dest='delete_mode',
                    help='Deleted Mode (label, tombstone). Label = Soft Delete, Tombstone = Hard Delete with Provability')
parser.add_argument('-crawler-role', required=True, dest='glue_role',
                    help='Role Name for Glue Crawler - note you must have iam:PassRole')
parser.add_argument('-catalog-database', default="data-api", required=False, dest='catalog_db',
                    help='Glue Database to store Data Elements (default)')
parser.add_argument('-gremlin', required=False, dest='gremlin',
                    help='Gremlin Endpoint for Data Lineage Tracking (host:port)')
parser.add_argument('-refresh-schema-hits', default="100", required=False, dest='refresh_schema_hits',
                    help='Number of HTTP Requests after which to refresh Data Schema (100)')
parser.add_argument('-allow-non-item-master', default="true", choices=['true', 'false'], required=False,
                    dest='allow_non_item_master', help='Allow writes to non ItemMaster entries? (true)')
parser.add_argument('-strict-occv', default="false", choices=['true', 'false'], required=False, dest='strict_occv',
                    help='Require strict optimistic concurrency control versioning? (false)')
parser.add_argument('-dev-stage', default="dev", required=False, dest='dev_stage', help='Stage Name for Dev API (dev)')
parser.add_argument('-test-stage', default="test", required=False, dest='test_stage',
                    help='Stage Name for Test API (test)')
parser.add_argument('-prod-stage', default="api", required=False, dest='prod_stage',
                    help='Stage Name for Prod API (api)')

# parse and convert args to dict
args = parser.parse_args()
config_doc = vars(args)

# parse and pivot subnets and security groups
config_doc["subnets"] = json.dumps(args.subnets.split(","))
config_doc["sgs"] = json.dumps(args.sgs.split(","))


def bad_gremlin():
    print("Gremlin Endpoint must be specified in format (host:port)")
    sys.exit(ERROR)


# set the gremlin endpoint
if args.gremlin is not None:
    if ':' not in args.gremlin:
        bad_gremlin()
    else:
        grem = args.gremlin.split(':')
        if len(grem) != 2:
            bad_gremlin()
        else:
            config_doc["gremlin_endpoint"] = grem[0]
            config_doc["gremlin_port"] = grem[1]

# import the template file
with open("sample/setup-config.pystache") as t:
    template = t.read()

# create the renderer
renderer = pystache.Renderer()

rendered = renderer.render(template, config_doc)

with open(".chalice/config.json", 'w') as out:
    out.write(rendered)

out.close()

print("Generated config.json to .chalicelib. Deploying Data API...")
deploy_args = ['chalice', 'deploy']

if args.dev_stage is not None:
    deploy_args = deploy_args + ['--stage', 'dev']

subprocess.call(deploy_args)

# get the URL so we can resolve the API ID
url = subprocess.check_output(['chalice', 'url'])

api_id = str(url).split(".")[0].split("//")[1]
